{"version":3,"sources":["queries/index.js","components/launch/SingleLaunch.js","components/launch/MissionKey.js","components/launch/Launches.js","components/launch/LaunchDetails.js","App.js","serviceWorker.js","index.js"],"names":["getLaunchesQuery","gql","_templateObject","getLaunchQuery","_templateObject2","SingleLaunch","_ref","_ref$launch","launch","launch_success","launch_date_local","mission_name","flight_number","react_default","a","createElement","className","classnames","mb-3","text-danger","text-success","dist_default","format","Link","to","concat","MissionKey","success","badge-danger","badge-success","Launches","_this$props$data","this","props","data","loading","error","launches","launchesList","console","log","map","launch_SingleLaunch","key","react","launch_MissionKey","Component","graphql","options","variables","match","params","_props$data","output","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","react_apollo_browser_umd","BrowserRouter","Route","exact","path","component","LaunchDetails","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bea09b29.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\r\n\r\nexport const getLaunchesQuery = gql`\r\n  {\r\n    launches {\r\n      flight_number\r\n      mission_name\r\n      launch_date_local\r\n      launch_success\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getLaunchQuery = gql`\r\n  query($flight_number: Int!) {\r\n    launch(flight_number: $flight_number) {\r\n      flight_number\r\n      mission_name\r\n      launch_date_local\r\n      launch_success\r\n      rocket {\r\n        rocket_id\r\n        rocket_name\r\n        rocket_type\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport classnames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport Moment from 'react-moment';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst SingleLaunch = ({\r\n  launch: { launch_success, launch_date_local, mission_name, flight_number }\r\n}) => {\r\n  // const classes = ['card-title'];\r\n  // props.launch.launch_success\r\n  //   ? classes.push('text-success')\r\n  //   : classes.push('text-danger');\r\n  return (\r\n    <div\r\n      className={classnames('card', {\r\n        'mb-3': mission_name\r\n      })}\r\n    >\r\n      <div className=\"card-body\">\r\n        <div className=\"row align-items-center\">\r\n          <div className=\"col-md-9\">\r\n            {/* <h3 className={classes.join(' ')}>\r\n              Mission: {mission_name}\r\n            </h3> */}\r\n            <h3\r\n              className={classnames('card-title', {\r\n                'text-danger': !launch_success,\r\n                'text-success': launch_success\r\n              })}\r\n            >\r\n              Mission: {mission_name}\r\n            </h3>\r\n            <p className=\"lead\">\r\n              Date:{' '}\r\n              <Moment format=\"YYYY/MM/DD HH:mm\">{launch_date_local}</Moment>\r\n            </p>\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <Link to={`/launches/${flight_number}`} className=\"btn btn-primary\">\r\n              Launch details\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSingleLaunch.propTypes = {\r\n  launch: PropTypes.object.isRequired\r\n};\r\n\r\nexport default SingleLaunch;\r\n","import React from 'react';\r\nimport classnames from 'classnames';\r\nconst MissionKey = ({ success }) => {\r\n  return (\r\n    <div\r\n      className={classnames('badge p-2', {\r\n        'badge-danger': !success,\r\n        'badge-success': success\r\n      })}\r\n    >\r\n      {success ? 'Success' : 'Fail'}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MissionKey;\r\n","import React, { Component, Fragment } from 'react';\r\nimport { graphql } from 'react-apollo';\r\nimport { getLaunchesQuery } from '../../queries';\r\nimport SingleLaunch from './SingleLaunch';\r\nimport MissionKey from './MissionKey';\r\nclass Launches extends Component {\r\n  render() {\r\n    const { loading, error, launches } = this.props.data;\r\n    const launchesList = !error ? (\r\n      loading ? (\r\n        <h1>Loading...</h1>\r\n      ) : (\r\n        launches.map(launch => (\r\n          <SingleLaunch launch={launch} key={launch.flight_number} />\r\n        ))\r\n      )\r\n    ) : (\r\n      console.log(error)\r\n    );\r\n    return (\r\n      <Fragment>\r\n        <h1 className=\"display-4 my-3\">Launches</h1>\r\n        <div className=\"mb-2\">\r\n          <MissionKey success={true} />\r\n        </div>\r\n        <div className=\"mb-2\">\r\n          <MissionKey success={false} />\r\n        </div>\r\n        {launchesList}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default graphql(getLaunchesQuery)(Launches);\r\n","import React, { Fragment } from 'react';\r\nimport { graphql } from 'react-apollo';\r\nimport { getLaunchQuery } from '../../queries';\r\nimport classnames from 'classnames';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst LaunchDetails = props => {\r\n  console.log(props);\r\n\r\n  const { error, loading, launch } = props.data;\r\n\r\n  const output = !error ? (\r\n    loading ? (\r\n      <h4>Loading...</h4>\r\n    ) : (\r\n      <div className=\"card mt-3\">\r\n        <div className=\"card-header\">\r\n          <h4 className=\"display-4 my-3\">\r\n            <span className=\"text-dark\">Mission:</span> {launch.mission_name}\r\n          </h4>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <h4>Launch Details:</h4>\r\n          <ul className=\"list-group\">\r\n            <li className=\"list-group-item\">\r\n              Flight Number: {launch.flight_number}\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n              Launch Year: {launch.launch_year}\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n              Launch Success:{' '}\r\n              <span\r\n                className={classnames({\r\n                  'text-success': launch.launch_success,\r\n                  'text-danger': !launch.launch_success\r\n                })}\r\n              >\r\n                {launch.launch_success ? 'Yes' : 'No'}\r\n              </span>\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n              Flight Number: {launch.flight_number}\r\n            </li>\r\n          </ul>\r\n          <br />\r\n          <h4>Rocket details:</h4>\r\n          <ul className=\"list-group\">\r\n            <li className=\"list-group-item\">\r\n              Rocket ID: {launch.rocket.rocket_id}\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n              Rocket Name: {launch.rocket.rocket_name}\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n              Rocket Type: {launch.rocket.rocket_type}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"card-footer\">\r\n          <Link to=\"/\" className=\"btn btn-primary\">\r\n            Go back\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    )\r\n  ) : (\r\n    console.log(error)\r\n  );\r\n\r\n  return <Fragment>{output}</Fragment>;\r\n};\r\n\r\nexport default graphql(getLaunchQuery, {\r\n  options: ({\r\n    match: {\r\n      params: { flight_number }\r\n    }\r\n  }) => ({\r\n    variables: {\r\n      flight_number: +flight_number\r\n    }\r\n  })\r\n})(LaunchDetails);\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Launches from './components/launch/Launches';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport LaunchDetails from './components/launch/LaunchDetails';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className=\"container\">\n            <Route exact path=\"/\" component={Launches} />\n            <Route path=\"/launches/:flight_number\" component={LaunchDetails} />\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}